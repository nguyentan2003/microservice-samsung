version: "3.8"
services:
  # ---------- Zookeeper not required if kafka in KRaft mode ----------
  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka-broker
    hostname: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"   # external (host) if you need to connect from host
    networks:
      - micro-net

  mysql:
    image: mysql:8.0.36-debian
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - micro-net
    
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - micro-net

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway-service
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8888:8888"
    depends_on:
      - identity-service
      - profile-service
      - product-service
      - order-service
    networks:
      - micro-net

  # IDENTITY - show 2 instances to demo scaling
  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8000
    ports:
      - "8000:8000"
    networks:
      - micro-net

  # PROFILE (single instance)
  profile-service:
    build:
      context: ./profile-service
      dockerfile: Dockerfile
    container_name: profile-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8100
    ports:
      - "8100:8100"
    networks:
      - micro-net

  # PRODUCT - 2 instances demo
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8200
    ports:
      - "8200:8200"
    networks:
      - micro-net

 

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8300
    ports:
      - "8300:8300"
    networks:
      - micro-net

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8500
    ports:
      - "8500:8500"
    networks:
      - micro-net

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service

    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8700
    ports:
      - "8700:8700"
    networks:
      - micro-net

  customer-summary-service:
    build:
      context: ./customer-summary-service
      dockerfile: Dockerfile
    container_name: customer-summary-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8800
    ports:
      - "8800:8800"
    networks:
      - micro-net

volumes:
  mysql-data:
  mongo-data:

networks:
  micro-net:
    driver: bridge
