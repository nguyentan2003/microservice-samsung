version: "3.8"

services:
  # -------------------- Kafka Cluster (KRaft mode) --------------------
  # -------------------- Kafka Cluster (3 nodes - KRaft mode) --------------------
  
  kafka-1:
    image: bitnami/kafka:3.8.0
    container_name: kafka-1
    hostname: kafka-1
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller

      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka-1:9092,CONTROLLER://kafka-1:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - micro-net
    volumes:
      - kafka1-data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:3.8.0
    container_name: kafka-2
    hostname: kafka-2
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka-2:9092,CONTROLLER://kafka-2:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - micro-net
    volumes:
      - kafka2-data:/bitnami/kafka

  kafka-3:
    image: bitnami/kafka:3.8.0
    container_name: kafka-3
    hostname: kafka-3
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka-3:9092,CONTROLLER://kafka-3:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - micro-net
    volumes:
      - kafka3-data:/bitnami/kafka

  # -------------------- MySQL --------------------
  mysql:
    image: mysql:8.0.36-debian
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - micro-net

  # -------------------- MongoDB --------------------
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - micro-net

  # -------------------- API Gateway --------------------
  api-gateway:
    build:
      context: ./api-gateway-service
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8888:8888"
    depends_on:
      - identity-service
      - profile-service
      - product-service
      - order-service
    networks:
      - micro-net

  # -------------------- IDENTITY SERVICE --------------------
  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8000
    ports:
      - "8000:8000"
    networks:
      - micro-net

  # -------------------- PROFILE SERVICE --------------------
  profile-service:
    build:
      context: ./profile-service
      dockerfile: Dockerfile
    container_name: profile-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8100
    ports:
      - "8100:8100"
    networks:
      - micro-net

  # -------------------- PRODUCT SERVICE --------------------
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      - mysql
    volumes:
      - product-uploads:/app/uploads
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8200
    networks:
      - micro-net

  # -------------------- ORDER SERVICE --------------------
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8300
    networks:
      - micro-net

  # -------------------- PAYMENT SERVICE --------------------
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8500
    ports:
      - "8500:8500"
    networks:
      - micro-net

  # -------------------- NOTIFICATION SERVICE --------------------
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8700
    ports:
      - "8700:8700"
    networks:
      - micro-net

  # -------------------- CUSTOMER SUMMARY SERVICE --------------------
  customer-summary-service:
    build:
      context: ./customer-summary-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Dserver.port=8800
    networks:
      - micro-net

volumes:
  mysql-data:
  mongo-data:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  product-uploads:

networks:
  micro-net:
    driver: bridge
