version: "3.8"

services:
    kafka:
        image: bitnami/kafka:3.8.0
        hostname: kafka
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - ALLOW_PLAINTEXT_LISTENER=yes
        ports:
            - "9094:9094"
        networks:
            - micro-net

    mysql:
        image: mysql:8.0.36-debian
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: root
        ports:
            - "3306:3306"
        volumes:
            - mysql-data:/var/lib/mysql
            - ./init:/docker-entrypoint-initdb.d
        networks:
            - micro-net

    mongo:
        image: mongo:6.0
        ports:
            - "27017:27017"
        volumes:
            - mongo-data:/data/db
        networks:
            - micro-net

    api-gateway:
        build:
            context: ./api-gateway-service
            dockerfile: Dockerfile
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        ports:
            - "8888:8888"
        depends_on:
            - identity-service
            - profile-service
            - product-service
            - order-service
        networks:
            - micro-net

    identity-service:
        build:
            context: ./identity-service
            dockerfile: Dockerfile
        depends_on:
            - mysql
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8000
        ports:
            - "8000:8000"
        networks:
            - micro-net

    profile-service:
        build:
            context: ./profile-service
            dockerfile: Dockerfile
        depends_on:
            - mysql
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8100
        ports:
            - "8100:8100"
        networks:
            - micro-net

    product-service:
        build:
            context: ./product-service
            dockerfile: Dockerfile
        depends_on:
            - mysql
        volumes:
            - product-uploads:/app/uploads
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8200
        networks:
            - micro-net

    order-service:
        build:
            context: ./order-service
            dockerfile: Dockerfile
        depends_on:
            - mysql
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8300
        networks:
            - micro-net
        deploy:
            replicas: 3
            placement:
                constraints: [node.role == worker]

    payment-service:
        build:
            context: ./payment-service
            dockerfile: Dockerfile
        depends_on:
            - mysql
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8500
        ports:
            - "8500:8500"
        networks:
            - micro-net

    notification-service:
        build:
            context: ./notification-service
            dockerfile: Dockerfile
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8700
        ports:
            - "8700:8700"
        networks:
            - micro-net

    customer-summary-service:
        build:
            context: ./customer-summary-service
            dockerfile: Dockerfile
        environment:
            - SPRING_PROFILES_ACTIVE=docker
            - JAVA_OPTS=-Dserver.port=8800
        networks:
            - micro-net
        deploy:
            replicas: 3
            placement:
                constraints: [node.role == worker]

volumes:
    mysql-data:
    mongo-data:
    product-uploads:

networks:
    micro-net:
        driver: overlay
